---
# ==============================================================================
# NODE EXPORTER INSTALLATION AND CONFIGURATION (Debian)
# ------------------------------------------------------------------------------
# Maintains the installation, configuration, healthcheck, and removal of
# Prometheus Node Exporter for system and hardware metrics collection on
# Debian-based Bitcoin servers.
#
# This file is MANAGED BY ANSIBLE. Manual edits will be overwritten.
#
# Features:
#   - Secure Node Exporter binary installation (with checksum verification)
#   - Dedicated system user and group for least privilege
#   - Directory creation for textfile collector and runtime
#   - Systemd service integration with hardening and logging
#   - UFW firewall rules for local network access (optional)
#   - Health and metrics endpoint verification
#   - Uninstallation and cleanup logic
#
# Variables:
#   - monitoring_node_exporter.version: Node Exporter version (e.g., "1.6.0")
#   - monitoring_node_exporter.checksum: SHA256 checksum for the release tarball
#   - monitoring_node_exporter.user: System user for Node Exporter
#   - monitoring_node_exporter.group: System group for Node Exporter
#   - monitoring_node_exporter.listen_address: Listen address (default: 0.0.0.0)
#   - monitoring_node_exporter.metrics_port: Metrics port (default: 9100)
#   - networking_networks.local: List of local network CIDRs for firewall rules
#
# Common commands:
#   sudo systemctl start node_exporter
#   sudo systemctl stop node_exporter
#   sudo systemctl restart node_exporter
#   sudo systemctl status node_exporter
#   sudo journalctl -u node_exporter -f
#
# ------------------------------------------------------------------------------
# Sections:
#   00. Set Node Exporter Ansible Facts
#   01. Shutdown Node Exporter Services       ['shutdown']
#   02. Set Up Node Exporter User             ['user_group']
#   03. Create Service Directories            ['directories']
#   04. Download & Install Node Exporter      ['install']
#   05. Setup Config Files for Node Exporter  ['config']
#   06. Setup Systemd for Node Exporter       ['systemd']
#   07. Setup Firewall for Node Exporter      ['firewall']
#   08. Setup Nginx Proxy for Node Exporter   ['proxy']
#   09. Setup Monitoring of Node Exporter     ['monitoring']
#   10. Healthchecks for Node Exporter        ['healthcheck']
#   99. Uninstall Node Exporter               ['uninstall']
#
# ------------------------------------------------------------------------------
# Update 2025-07-13:
#   - Refactored to align with 00_service_template.yaml
#   - Added comprehensive verification and health checks
# Update 2025-08-05:
#   - Reorganized task structure for clarity
#   - Added uninstallation tasks
#
# Last updated: 2025-08
# ------------------------------------------------------------------------------

# =============================================================================
## 00. SET NODE EXPORTER ANSIBLE FACTS
# This makes it easier to read the ansible tasks
# -----------------------------------------------------------------------------

- name: Set Node Exporter facts
  ansible.builtin.set_fact:
    node_exporter_binary_path: "/usr/local/bin/node_exporter"
    node_exporter_config_dir: "/etc/{{  monitoring_node_exporter.user }}"
    node_exporter_config_file: "/etc/{{  monitoring_node_exporter.user }}/node-exporter.conf"
    node_exporter_data_dir: "/data/{{  monitoring_node_exporter.user }}"
    node_exporter_download_url: "https://github.com/prometheus/node_exporter/releases/download/v{{ monitoring_node_exporter.version }}/node_exporter-{{ monitoring_node_exporter.version }}.linux-amd64.tar.gz"
    node_exporter_group: "{{ monitoring_node_exporter.group }}"
    node_exporter_listen_address: "{{ monitoring_node_exporter.listen_address }}"
    node_exporter_metrics_port: "{{  monitoring_node_exporter.metrics_port }}"
    node_exporter_scrape_config_path: "/etc/prometheus/conf.d/node-exporter.yml"
    node_exporter_systemd_name: "{{ monitoring_node_exporter.user }}"
    node_exporter_user: "{{ monitoring_node_exporter.user }}"
  tags: [install, config, user_group, directories, systemd, monitoring, firewall, nginx, healthcheck, uninstall]

- name: Display Node Exporter variables for debugging
  ansible.builtin.debug:
    var: monitoring_node_exporter
  tags: [debug]

- name: Display Node Exporter facts for debugging
  ansible.builtin.debug:
    msg:
      - "Fact -> node_exporter_binary_path: {{ node_exporter_binary_path }}"
      - "Fact -> node_exporter_config_dir: {{ node_exporter_config_dir }}"
      - "Fact -> node_exporter_config_file: {{ node_exporter_config_file }}"
      - "Fact -> node_exporter_data_dir: {{ node_exporter_data_dir }}"
      - "Fact -> node_exporter_download_url: {{ node_exporter_download_url }}"
      - "Fact -> node_exporter_group: {{ node_exporter_group }}"
      - "Fact -> node_exporter_listen_address: {{ node_exporter_listen_address }}"
      - "Fact -> node_exporter_metrics_port: {{ node_exporter_metrics_port }}"
      - "Fact -> node_exporter_scrape_config_path: {{ node_exporter_scrape_config_path }}"
      - "Fact -> node_exporter_systemd_name: {{ node_exporter_systemd_name }}"
      - "Fact -> node_exporter_user: {{ node_exporter_user }}"
  tags:
    - debug


# =============================================================================
## 01. SHUTDOWN NODE EXPORTER SERVICES
# This section ensures that the service is stopped before config any changes and
# updates are applied to prevent conflict issues.
# -----------------------------------------------------------------------------

- name: Check if Node Exporter service exists
  ansible.builtin.stat:
    path: "/lib/systemd/system/{{ node_exporter_systemd_name }}.service"
  register: service_file
  tags: [install, config, systemd, shutdown]

- name: Ensure Node Exporter service is stopped before modifying
  ansible.builtin.systemd:
    name: "{{ node_exporter_systemd_name }}"
    state: stopped
  become: true
  failed_when: false
  when: service_file.stat.exists
  tags: [install, config, systemd, shutdown]



# =============================================================================
## 02. SET UP NODE EXPORTER USER & CREATE SERVICE DIRECTORIES
# This section sets up the system user and group to run the service and create
# all the directories for the service
# -----------------------------------------------------------------------------

- name: Create Node Exporter group exists
  ansible.builtin.group:
    name: "{{ node_exporter_group }}"
    state: present
  become: true
  tags: [install, user_group]

- name: Create Node Exporter system user
  ansible.builtin.user:
    name: "{{ node_exporter_user }}"
    group: "{{ node_exporter_group }}"
    groups: "systemd-journal"
    system: true
    shell: /usr/sbin/nologin
    create_home: false
    comment: "Node Exporter Monitoring Service System Account"
    append: true
  become: true
  tags: [install, user_group]



# =============================================================================
# 03. CREATE REQUIRED NODE EXPORTER DIRECTORIES
# This section creates the required directories
# -----------------------------------------------------------------------------

- name: Create directories for Node Exporter service
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ node_exporter_user}}"
    group: "{{ node_exporter_group }}"
    mode: "{{ item.mode }}"
  loop:
    - { path: "{{ node_exporter_config_dir }}", mode: "u=rwx,g=rw,o="}
    - { path: "{{ node_exporter_data_dir }}",   mode: "u=rwx,g=rw,o="}
    - { path: "{{ node_exporter_data_dir }}/textfile_collector", mode: "u=rwx,g=rw,o="}
  register: node_exporter_config_dir_stat
  become: true
  tags: [install]

- name: Stat Node Exporter config directory
  ansible.builtin.stat:
    path: "{{ node_exporter_config_dir }}"
  register: node_exporter_config_dir_stat
  tags: [install, config, directories, verify]

- name: Stat Node Exporter data directory
  ansible.builtin.stat:
    path: "{{ node_exporter_data_dir }}"
  register: node_exporter_data_dir_stat
  tags: [install, config, directories, verify]

- name: Assert Node Exporter config and data directories are created
  ansible.builtin.assert:
    that:
      - node_exporter_config_dir_stat.stat.exists
      - node_exporter_data_dir_stat.stat.exists
    fail_msg: "Node Exporter config or data directory does not exist!"
    success_msg: "Node Exporter config and data directories exist."
  tags: [install, config, directories, verify]



# =============================================================================
## 04. DOWNLOAD & INSTALL NODE EXPORTER
# This section downloads the binary, installs it, and verifies the installation.
# -----------------------------------------------------------------------------

- name: Download Node Exporter v{{ monitoring_node_exporter.version }}
  ansible.builtin.get_url:
    url: "{{ node_exporter_download_url }}"
    dest: "/tmp/node_exporter-{{ monitoring_node_exporter.version }}.tar.gz"
    mode: '0644'
    timeout: 60
    checksum: "sha256:{{ monitoring_node_exporter.checksum }}"
  become: true
  retries: 3
  delay: 5
  register: download_result
  until: download_result is succeeded
  tags: [install]

- name: Ensure temporary extract directory exists
  ansible.builtin.file:
    path: "/tmp/node_exporter-{{ monitoring_node_exporter.version }}-extract"
    state: directory
    mode: '0755'
  become: true
  tags: [install]

- name: Extract Node Exporter archive
  ansible.builtin.unarchive:
    src: "/tmp/node_exporter-{{ monitoring_node_exporter.version }}.tar.gz"
    dest: "/tmp/node_exporter-{{ monitoring_node_exporter.version }}-extract"
    remote_src: true
    extra_opts: 
      - "--strip-components=1"
  become: true
  tags: [install]

- name: Install Node Exporter binary
  ansible.builtin.copy:
    src: "/tmp/node_exporter-{{ monitoring_node_exporter.version }}-extract/node_exporter"
    dest: "{{ node_exporter_binary_path }}"
    owner: root
    group: root
    mode: '0755'
    remote_src: true
  become: true
  tags: [install]

- name: Verify node_exporter binary version
  ansible.builtin.command: "{{ node_exporter_binary_path }} --version"
  register: node_exporter_version_check
  changed_when: false
  tags: [install, verify]

- name: Assert correct node_exporter version is installed
  ansible.builtin.assert:
    that:
      - "monitoring_node_exporter.version in node_exporter_version_check.stdout"
    fail_msg: "Node Exporter version check failed. Expected {{ monitoring_node_exporter.version }}. Found: {{ node_exporter_version_check.stdout }}"
    success_msg: "Node Exporter v{{ monitoring_node_exporter.version }} binary installed successfully."
  tags: [install, verify]

- name: Clean up downloaded archives and temp directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "/tmp/node_exporter-{{ monitoring_node_exporter.version }}.tar.gz"
    - "/tmp/node_exporter-{{ monitoring_node_exporter.version }}-extract"
  become: true
  tags: [install, cleanup]



# =============================================================================
## 06. SETUP SETUP CONFIG FILES FOR NODE EXPORTER
# This section sets up the configuration files for Node Exporter
# -----------------------------------------------------------------------------

- name: Deploy Node Exporter environment file
  ansible.builtin.template:
    src: templates/node-exporter-config.conf.j2
    dest: "{{ node_exporter_config_file }}"
    owner: root
    group: root
    mode: '0644'
  become: true
  tags: [instll, config]



# =============================================================================
## 06. SETUP SYSTEMD FOR NODE EXPORTER
# This section sets up the systemd unit file for the service
# -----------------------------------------------------------------------------

- name: Deploy Node Exporter systemd unit file to "/lib/systemd/system/{{ node_exporter_systemd_name }}.service"
  ansible.builtin.template:
    src: templates/node-exporter-systemd.service.j2
    dest: "/lib/systemd/system/{{ node_exporter_systemd_name }}.service"
    owner: root
    group: root
    mode: '0644'
  become: true
  tags: [install, systemd]

- name: Verify Node Exporter systemd service config is valid
  ansible.builtin.command: "systemd-analyze verify /lib/systemd/system/{{ node_exporter_systemd_name }}.service"
  register: systemd_verify
  changed_when: false
  failed_when: systemd_verify.rc != 0
  tags: [install, verify]

- name: Reload systemd and start Node Exporter service
  ansible.builtin.systemd_service:
    daemon_reload: true
    name: "{{ node_exporter_systemd_name }}"
    enabled: true
    state: started
  become: true
  tags: [install, systemd]

- name: Verify Node Exporter service is active
  ansible.builtin.systemd:
    name: "{{ node_exporter_systemd_name }}"
  register: service_status
  changed_when: false
  tags: [install, systemd, verify, healthcheck]

- name: Assert Node Exporter service is running
  ansible.builtin.assert:
    that:
      - service_status.status.ActiveState == "active"
    fail_msg: "Node Exporter service is NOT active."
    success_msg: "Node Exporter service is active."
  tags: [install, systemd, verify, healthcheck]


# =============================================================================
## 07. SETUP FIREWALL FOR NODE EXPORTER
# This section sets up the firewall rules to allow the service traffic
# -----------------------------------------------------------------------------

- name: Deploy Node Exporter UFW application profile
  ansible.builtin.template:
    src: "templates/node-exporter-ufw-profile.j2"
    dest: "/etc/ufw/applications.d/{{ node_exporter_systemd_name }}"
    owner: root
    group: root
    mode: '0644'
  become: true
  tags: [install, firewall]

- name: Reload UFW Node Exporter application profiles
  ansible.builtin.command: "ufw app update {{ node_exporter_systemd_name }}"
  become: true
  changed_when: false
  failed_when: false
  tags: [install, firewall]

- name: Allow Node Exporter through UFW from local networks
  ansible.builtin.ufw:
    rule: allow
    name: "Node Exporter"
    comment: "Allow Node Exporter ({{ node_exporter_metrics_port }}/tcp) from LOCAL NET"
    src: "{{ item }}"
  loop: "{{ networking_networks.local }}"
  become: true
  tags: [never, firewall]

- name: Confirm Node Exporter UFW profile is allowed for local networks
  ansible.builtin.command: "ufw status numbered"
  register: ufw_status
  changed_when: false
  tags: [never, firewall]

- name: Assert Node Exporter UFW rule exists for each local network
  ansible.builtin.assert:
    that:
      - "ufw_status.stdout is search('Node Exporter') and ufw_status.stdout is search(item)"
    fail_msg: "Node Exporter UFW rule is NOT present for {{ item }}"
    success_msg: "Node Exporter UFW rule is present for {{ item }}"
  loop: "{{ networking_networks.local }}"
  tags: [never, firewall]



# =============================================================================
## 08. SETUP PROMETHEUS MONITORING
# This section sets up the any log or collection metrics
# -----------------------------------------------------------------------------

- name: Deploy Node Exporter scrape config to Prometheus
  ansible.builtin.template:
    src: templates/node-exporter-scraper.yml.j2
    dest: "/etc/prometheus/conf.d/{{ node_exporter_systemd_name }}-scraper.yml"
    owner: "{{ monitoring_prometheus.user }}"
    group: "{{ monitoring_prometheus.group }}"
    mode: '0640'
  become: true
  notify: Prometheus Restart
  tags: [install, monitoring]

- name: Verify Prometheus scraper configuration files are valid
  ansible.builtin.command: "/usr/local/bin/promtool check config /etc/{{ monitoring_prometheus.user }}/prometheus.yml"
  register: config_verify
  changed_when: false
  failed_when: config_verify.rc != 0
  become: true
  become_user: "{{ monitoring_prometheus.user }}"
  tags: [install, monitoring, verify]



# =============================================================================
## 08. HEALTH CHECKS FOR NODE EXPORTER
# This section runs healthchecks for the service to confirm it is running as expected
# -----------------------------------------------------------------------------

- name: Wait for Node Exporter to be available
  ansible.builtin.wait_for:
    host: "{{ monitoring_node_exporter.listen_address }}"
    port: "{{ monitoring_node_exporter.metrics_port }}"
    delay: 5
    timeout: 30
  tags: [install, verify, healthcheck]

- name: Check Node Exporter metrics endpoint
  ansible.builtin.uri:
    url: "http://{{ monitoring_node_exporter.listen_address }}:{{ monitoring_node_exporter.metrics_port }}/metrics"
    method: GET
    status_code: 200
  register: node_exporter_health
  tags: [install, verify, healthcheck]

- name: Assert Node Exporter is healthy
  ansible.builtin.assert:
    that:
      - node_exporter_health.status == 200
    fail_msg: "Node Exporter health check endpoint failed."
    success_msg: "Node Exporter health check endpoint is responding correctly."
  tags: [install, verify, healthcheck]

- name: Display Node Exporter access information
  ansible.builtin.debug:
    msg:
      - "=== Node Exporter Health Check Summary ==="
      - "Service Status: {{ service_status.status.ActiveState }}"
      - "Metrics Endpoint: http://{{ ansible_host }}:{{ node_exporter.port | default('9100') }}/metrics"
      - "Health Status: {{ node_exporter_health.status }} (Healthy)"
      - "Firewall: Active for local networks"
      - "=== End Summary ==="
  tags: [install, verify, healthcheck]


# =============================================================================
# 99. UNINSTALL NODE EXPORTER
# This sections handles the uninsallation task
# -----------------------------------------------------------------------------

- name: Stop Node Exporter service
  ansible.builtin.systemd:
    name: "{{ node_exporter_systemd_name }}"
    state: stopped
  become: true
  tags: [never, uninstall]

- name: Remove Node Exporter user
  ansible.builtin.user:
    name: "{{ node_exporter_user }}"
    state: absent
  become: true
  tags: [never, uninstall]

- name: Remove Node Exporter group
  ansible.builtin.group:
    name: "{{ node_exporter_group }}"
    state: absent
  become: true
  tags: [never, uninstall]
 
- name: Remove directories for Node Exporter service
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop:
    - { path: "{{ node_exporter_config_dir }}", mode: "u=rwx,g=rw,o="}
    - { path: "{{ node_exporter_data_dir }}",   mode: "u=rwx,g=rw,o="}
    - { path: "{{ node_exporter_data_dir }}/textfile_collector", mode: "u=rwx,g=rw,o="}
  become: true
  tags: [never, uninstall]

- name: Remove Node Exporter binary
  ansible.builtin.file:
    src: "{{ node_exporter_binary_path }}"
    state: absent
  become: true
  tags: [never, uninstall]

- name: Remove Node Exporter Systemd
  ansible.builtin.file:
    src: "/lib/systemd/system/{{ node_exporter_systemd_name }}.service"
    state: absent
  become: true
  tags: [never, uninstall]

- name: Reload systemd and start Node Exporter service
  ansible.builtin.systemd_service:
    daemon_reload: true
  become: true
  tags: [never, uninstall]

- name: Remove UFW application profile
  ansible.builtin.template:
    src: "/etc/ufw/applications.d/{{ node_exporter_systemd_name }}"
    state: absent
  become: true
  tags: [never, uninstall]

- name: Reload UFW Rules
  ansible.builtin.command: "ufw reload"
  become: true
  tags: [never, uninstall]

- name: Deploy Node Exporter scrape config to Prometheus
  ansible.builtin.file:
    src: "/etc/prometheus/conf.d/{{ node_exporter_systemd_name }}-scraper.yml"
    state: absent 
  become: true
  notify: Prometheus Restart
  tags: [never, uninstall]