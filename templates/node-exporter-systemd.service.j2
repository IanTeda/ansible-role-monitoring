# ------------------------------------------------------------------------------
# Node Exporter Systemd Service Unit File
# ------------------------------------------------------------------------------
#
# This systemd service file configures Prometheus Node Exporter to run as a
# system service, collecting a wide range of system and hardware metrics for
# monitoring a Bitcoin server.
#
# Features:
#   - Runs as a dedicated, unprivileged user (node_exporter)
#   - Collects detailed system metrics (CPU, memory, disk, network, etc.)
#   - Hardened with extensive systemd security options
#
# Configuration:
#   - User: {{ node_exporter_user }}
#   - Group: {{ node_exporter_group }}
#   - Working Directory: /opt/{{ node_exporter_systemd_name }}
#   - Binary location: {{ node_exporter_binary_path }}
#   - Logs: sudo journalctl -u {{ node_exporter_systemd_name }} -f
#
# Usage:
#   systemctl enable {{ node_exporter_systemd_name }}    # Enable on boot
#   systemctl start {{ node_exporter_systemd_name }}     # Start service
#   systemctl status {{ node_exporter_systemd_name }}   # Check status
#   systemctl stop {{ node_exporter_systemd_name }}      # Stop service
#
# Security Notes:
#   - Node Exporter runs with limited privileges and restricted filesystem access.
#   - The metrics endpoint should be firewalled to allow access only from the
#     Prometheus server's IP address.
#
# Dependencies:
#   - Requires network.target.
#
# References:
#   - https://prometheus.io/docs/guides/node-exporter/
#   - https://www.freedesktop.org/software/systemd/man/systemd.service.html
#
# Last updated: 2025-07-13
# ------------------------------------------------------------------------------

[Unit]
Description=Prometheus Node Exporter
Documentation=https://prometheus.io/docs/guides/node-exporter/

# Service Dependencies
######################

After=network.target
Wants=network.target

[Service]
# The folder to run the ExecStart command from
WorkingDirectory={{ node_exporter_data_dir }}

# Load environment variables from /etc/default/{{ node_exporter_systemd_name }}
EnvironmentFile=-{{ node_exporter_config_file }}

# Node Exporter binary with optimised collectors
ExecStart={{ node_exporter_binary_path }} --web.listen-address="{{ node_exporter_listen_address }}:{{ node_exporter_metrics_port }}" $NODE_EXPORTER_ARGS

# Process management
####################

Type=simple
User={{ node_exporter_user }}
Group={{ node_exporter_group }}

Restart=on-failure
RestartSec=10

# Directory creation and permissions
####################################

# Allow access to system information and network statistics
SupplementaryGroups=systemd-journal

# Use PrivateNetwork=false to allow access to network statistics
PrivateNetwork=false

# Set read only paths for the service process and all its children
# Node Exporter needs read access to /proc and /sys to collect metrics.
# Note: Removed specific /proc restriction to allow full network statistics access
ReadOnlyPaths={{ node_exporter_config_dir }}
ReadWritePaths={{ node_exporter_data_dir }} {{ node_exporter_data_dir }}/textfile_collector

# Logging to systemd
####################

# Log to systemd journal
StandardOutput=journal
StandardError=journal
SyslogIdentifier={{ node_exporter_user }}

# Hardening measures
####################

# Provide a private /tmp and /var/tmp.
PrivateTmp=true

# Mount /usr, /boot/ and /etc read-only for the process.
# Note: Disabled ProtectSystem to allow full /proc access for network statistics
# ProtectSystem=full

# Deny access to /home, /root and /run/user
ProtectHome=true

# Disallow the process and all of its children to gain
# new privileges through execve().
NoNewPrivileges=true

# Note: PrivateDevices is disabled to allow Node Exporter access to network device statistics
# Use a new /dev namespace only populated with API pseudo devices
# such as /dev/null, /dev/zero and /dev/random.
# PrivateDevices=true

# Deny the creation of writable and executable memory mappings.
MemoryDenyWriteExecute=true

# Restrict ABIs to help ensure MemoryDenyWriteExecute is enforced
SystemCallArchitectures=native

# Prevents the service (and any processes it spawns) from loading, unloading, or modifying Linux kernel modules
ProtectKernelModules=true

# Prevents the service (and any processes it spawns) from modifying or creating control groups (cgroups) on the system
ProtectControlGroups=true

# Limits which network address families the service can use
# Note: Added AF_NETLINK for network statistics access
RestrictAddressFamilies=AF_INET AF_INET6 AF_UNIX AF_NETLINK

# Prevents the service (and any processes it spawns) from gaining real-time scheduling privileges
RestrictRealtime=true

[Install]
WantedBy=multi-user.target
